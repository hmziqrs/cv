use regex::Regex;
use std::error::Error;
use std::fs;
use std::path::{Path, PathBuf};

fn find_cargo_toml() -> Option<PathBuf> {
    let mut current_dir = std::env::current_dir().ok()?;

    loop {
        let cargo_toml_path = current_dir.join("Cargo.toml");
        if cargo_toml_path.exists() {
            return Some(cargo_toml_path);
        }

        if !current_dir.pop() {
            return None; // Reached the root directory without finding Cargo.toml
        }
    }
}

fn main() -> Result<(), Box<dyn Error>> {
    // Find and read Cargo.toml
    let cargo_toml_path = find_cargo_toml().ok_or("Could not find Cargo.toml file")?;
    let content = fs::read_to_string(&cargo_toml_path)?;
    let parsed_toml: cargo_toml::Value = content.parse()?;

    // Get package name
    let package_name = parsed_toml
        .get("package")
        .and_then(|p| p.get("name"))
        .and_then(|n| n.as_str())
        .ok_or("Failed to find package name in Cargo.toml")?;

    println!("Package name: {}", package_name);

    // Get the project root directory (parent of the directory containing Cargo.toml)
    let project_root = cargo_toml_path
        .parent()
        .ok_or("Failed to get parent directory of Cargo.toml")?;

    // Construct path to index.html
    let index_html_path = project_root
        .join("target")
        .join("dx")
        .join(package_name)
        .join("release")
        .join("web")
        .join("public")
        .join("index.html");

    // Read index.html
    match fs::read_to_string(&index_html_path) {
        Ok(html_content) => {
            println!(
                "Successfully read index.html from: {}",
                index_html_path.display()
            );

            // Create regex patterns to match the tags we want to remove
            // Pattern for preload link tags
            let link_js_regex = Regex::new(
                r#"<link rel="preload" as="script" href="/\./assets/cv-[a-z0-9]+\.js" crossorigin>"#,
            )?;
            let link_wasm_regex = Regex::new(
                r#"<link rel="preload" as="fetch" type="application/wasm" href="/\./assets/cv_bg-[a-z0-9]+\.wasm" crossorigin>"#,
            )?;

            // Pattern for the script tag at the bottom
            let script_pattern = Regex::new(
                r#"<script>\s*// We can't use a module script.*?wasm\.main\(\);\s*}\s*}\);\s*}\s*\);\s*</script>"#,
            )?;

            // Remove the tags
            let modified_html = link_js_regex.replace_all(&html_content, "");
            let modified_html = link_wasm_regex.replace_all(&modified_html, "");

            // Write the modified HTML back to the file
            fs::write(&index_html_path, modified_html.as_bytes())?;

            println!("Successfully removed specified tags from index.html");

            Ok(())
        }
        Err(e) => Err(format!(
            "Failed to read index.html at {}: {}",
            index_html_path.display(),
            e
        )
        .into()),
    }
}
